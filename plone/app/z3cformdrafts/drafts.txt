August 20, 2010


Introduction
============
Dexterity drafts support implements services for managing auto-saved dexterity
content drafts in Plone specificly using z3cform. This addresses two problems:

* If the browser is accidentally closed or crashes whilst a page is being
  edited, all changes are lost.
* Some data may need to be managed asynchronously via ajax, This data should not be
  saved until the form is saved (and in the case of an add form, it is impossible
  to do so). I will be releasing shortly a widget that allows image previews without
  loading a page.
* The ability to preview drafts before making a choice to save them.
* Images and other fields do not 'disappear' when a form is submitted and there were
  errors in the form


Installation
============
The package is current built as braches to:
  plone.dexterity
  plone.app.dexterity
  plone.app.drafts
  plone.z3cform
  plone.formwidget.namedfile

One optional package is dexterity.draftspreviewbehavior which will show a 'view'
of the draft before it is saved.

The easiest way to install this until the code is merged is to use the development
dexterity buildouts located at:
  https://svn.plone.org/svn/plone/plone.dexterity/buildouts/dev/

edit the buildout.cfg file and change to something like the following:

  #Plone 4 with lxml (static) and drafts support
  extends =
      plone4.cfg drafts.cfg lxml.cfg tests.cfg

then run:
  python2.6 bootstrap.py
  ./bin/builout -vvvv


IMPORTANT:
----------
You will also need to install the 'Drafts Support'  from the portal_quickinstaller tool
or Plone's Add-ons control panel.

How it Works
============
<element value="plone.app.drafts.interfaces.IDraftable" />

When a user chooses to add or edit content, the request in intercepted and and
if the IDexterityDraftable behavior is enabled for a draft content object.  The
request is saved to a draft and reloaded each time a page is loaded.

All the add / edit buttons and handlers that appear in the add/edit forms are
overwritten with Custom button handlers to allow the draft to be saved properly.
The original 'save' and 'cancel' handlers will be executed though, after a few
things are set up so any original code can still complete.

All the new buttons can be overridden if needed, since they are just adapters.
See plone.app.dexterity.behaviors.drafts.py/zcml for examples.  These button
action adapters could also be used for any other project to override handlers
I suppose (uses plone.z3cform.buttonoverrides.py).

Drafting is compatible with ajax validation (will auto save draft every time
user press tab), and plone.formwidget.namedimage.  If a form is submitted
and errors exist; the image will not load in the error page (it won't get lost).

Other Opt-in Behaviors
----------------------
<element value="plone.app.dexterity.behaviors.drafts.IDraftAutoSaveBehavior" />
<element value="plone.app.z3cformdrafts.interfaces.IDraftSaveBehavior" />
<element value="dexterity.draftspreviewbehavior.IDraftPreviewBehavior" />

IDraftAutoSaveBehavior enables draft to be saved automatically if kss validation
is enabled.  Draft will be saved on every onChange() event.

If IDraftSaveBehavior and IDraftPreviewBehavior are enabled, Two new buttons
will appear in the add / edit forms being 'Save' and 'Preview'.

Save, just saves the draft.  No error checking or validation takes place at
this point.  The page will be reloaded.  User can navigate away or access
the draft from another browser simply by choose to add or edit the existing
content object again.

Preview mode actually will attempt to use the current view that would be used
to display the content type once it is saved, to allow the user to make a decision
to save, edit or discard the form (either a custom view or generated by autoform).

Cancel will discard the draft.  If editing, the original content is not modified.


Usage
=====
Enable behaviors requires to enable draft on z3cform geterated content type:
(usually locted in .profiles/default/types directory.

<!-- enabled behaviors -->
 <property name="behaviors">
     <element value="plone.app.content.interfaces.INameFromTitle" />

     <!-- specicific related to draft behaviors below -->
     <element value="plone.app.drafts.interfaces.IDraftable" />

     <!-- To enable draft to be saved automatically if kss validation is
          enabled.  Draft will be saved on every onChange() event -->
     <element value="plone.app.dexterity.behaviors.drafts.IDraftAutoSaveBehavior" />

     <!-- To enable user to be able to manually save the draft -->
     <element value="plone.app.z3cformdrafts.interfaces.IDraftSaveBehavior" />

     <!-- To enable previews on the draft content type -->
     <element value="dexterity.draftspreviewbehavior.IDraftPreviewBehavior" />
 </property>

IMPORTANT: Don't forget to re-install (import via portal_setup) your content type
           when you have added the new draft behaviors or they won't be enabled!!

