========================
Dexterity Drafts Support
========================

We'll need a logged in test browser

  >>> from Products.Five.testbrowser import Browser
  >>> browser = Browser()
  >>> browser.handleErrors = False
  >>> self.app.acl_users.userFolderAddUser('root', 'secret', ['Manager'], [])
  >>> browser.addHeader('Authorization', 'Basic root:secret')

Dexterity Types Configlet
-------------------------

Once the 'Dexterity Content Configlet' product is installed, site managers
can navigate to the configlet via the control panel

  >>> browser.open('http://nohost/plone')
  >>> browser.getLink('Site Setup').click()
  >>> browser.getLink('Dexterity Content Types').click()
  >>> browser.url
  'http://nohost/plone/@@dexterity-types'
  >>> 'Dexterity content types' in browser.contents
  True

Adding a content type
---------------------

Let's add a 'Plonista' content type to keep track of members of the Plone
community

  >>> browser.getControl('Add New Content Type').click()
  >>> browser.getControl('Type Name').value = 'Plonista'
  >>> browser.getControl('Short Name').value = 'plonista'
  >>> browser.getControl('Add').click()
  >>> browser.url
  'http://nohost/plone/dexterity-types'

Now we should also have a 'plonista' FTI in portal_types

  >>> 'plonista' in self.portal.portal_types
  True

The new type should have the dublin core behavior assigned by default

  >>> plonista = self.portal.portal_types.plonista
  >>> 'plone.app.dexterity.behaviors.metadata.IDublinCore' in plonista.behaviors
  True
  >>> 'document_icon' in plonista.getIcon()
  True


Editing a content type
----------------------

Editing schemata is handled by the plone.schemaeditor package and is tested
there.  However, let's at least make sure that we can navigate to the
schema for the 'plonista' type we just created

#  >>> browser.open('http://nohost/plone/@@dexterity-types')
#  >>> browser.getLink('Plonista').click()
#  >>> schemaeditor_url = browser.url
#  >>> schemaeditor_url
#  'http://nohost/plone/dexterity-types/plonista'

Demonstrate that all the registered field types can be added edited
and saved.

#  >>> from zope import component
#  >>> from plone.i18n.normalizer.interfaces import IIDNormalizer
#  >>> from plone.schemaeditor import interfaces
#  >>> normalizer = component.getUtility(IIDNormalizer)
#  >>> schema = plonista.lookupSchema()
#  >>> for name, factory in sorted(component.getUtilitiesFor(
#  ...     interfaces.IFieldFactory)):
#  ...     browser.open(schemaeditor_url)
#  ...     browser.getControl('Add new field').click()
#  ...     browser.getControl('Title').value = name
#  ...     field_id = normalizer.normalize(name).replace('-', '_')
#  ...     browser.getControl('Short Name').value = field_id
#  ...     browser.getControl('Field type').getControl(
#  ...         value=getattr(factory.title, 'default', factory.title)
#  ...         ).selected = True
#  ...     browser.getControl('Add').click()
#  ...     assert browser.url == schemaeditor_url, (
#  ...         "Couldn't successfully add %r" % name)
#  ...     assert field_id in schema, '%r not in %r' % (
#  ...         field_id, schema)
#  ...     assert factory.fieldcls._type is None or isinstance(
#  ...         schema[field_id], factory.fieldcls
#  ...         ), '%r is not an instance of %r' % (
#  ...             schema[field_id], factory.fieldcls)
#  ...     browser.getLink(url=field_id).click()
#  ...     browser.getControl('Save').click()


Confirm drafts and buttons are not enabled without behavior set
---------------------------------------------------------------

Add an instance

  >>> browser.open('http://nohost/plone')
  >>> browser.getLink('Plonista').click()
  >>> browser.getControl('Title').value = ''

Confirm 'Draft' button does not exists

  >>> draft = True
  >>> try:
  ...     browser.getControl('Draft')
  ... except LookupError:
  ...     draft = False
  >>> draft
  False

  >>> browser.getControl('Cancel').click()
  >>> browser.url
  'http://nohost/plone'

Enable draft behaviors
----------------------

Enable the IDraftable and IDraftSaveBehavior from the dexterity-types manager

  >>> browser.open('http://nohost/plone/@@dexterity-types')
  >>> browser.getLink('Plonista').click()
  >>> browser.getLink('Behaviors').click()
  >>> browser.getControl(name='form.widgets.plone.app.drafts.interfaces.IDraftable:list').value = ['selected']
  >>> browser.getControl(name='form.widgets.plone.app.z3cformdrafts.interfaces.IDraftSaveBehavior:list').value = ['selected']
  >>> browser.getControl('Save').click()
  >>> self.portal.portal_types.plonista.behaviors
  ['plone.app.dexterity.behaviors.metadata.IDublinCore', 'plone.app.content.interfaces.INameFromTitle', 'plone.app.z3cformdrafts.interfaces.IDraftSaveBehavior', 'plone.app.drafts.interfaces.IDraftable']


add content ++add++
-------------------

Add an instance

  >>> browser.open('http://nohost/plone')
  >>> browser.getLink('Plonista').click()
  >>> browser.getControl('Title').value = 'Jason Mehring'

  >>> browser.getControl(name='form.widgets.IDublinCore.title').value
  'Jason Mehring'

Confirm 'Draft' button exists

  >>> browser.getControl('Draft').click()
  >>> browser.url
  'http://nohost/plone/++add++plonista'

Confirm form contains draft data

  >>> browser.getControl('Title').value
  'Jason Mehring'

Abandon draft and try adding content type again.  Data should still be saved in
draft

  >>> browser.open('http://nohost/plone')
  >>> browser.getLink('Plonista').click()

Confirm form contains draft data

  >>> browser.getControl('Title').value
  'Jason Mehring'

Submit the draft

  >>> browser.getControl('Save').click()
  >>> browser.url
  'http://nohost/plone/jason-mehring/view'

Confirm draft was removed
-------------------------

If 'Title' has no values, the draft was successfuly removed
by previous 'Submit'.  A fresh draft will now be created.

  >>> browser.open('http://nohost/plone')
  >>> browser.getLink('Plonista').click()
  >>> browser.getControl('Title').value
  ''

Add back in some data so we can test to make sure cancel will remove the draft
as well

  >>> browser.getControl('Title').value = 'Jason Mehring'
  >>> browser.getControl('Draft').click()
  >>> browser.getControl('Title').value
  'Jason Mehring'
  >>> browser.getControl('Cancel').click()
  >>> browser.url
  'http://nohost/plone'

Check and make sure 'Cancel' removed the draft

  >>> browser.open('http://nohost/plone')
  >>> browser.getLink('Plonista').click()
  >>> browser.getControl('Title').value
  ''
  >>> browser.getControl('Cancel').click()
  >>> browser.url
  'http://nohost/plone'

Edit content @@edit
-------------------

Lets to it all over again; this time for edit

  >>> browser.open('http://nohost/plone/jason-mehring/edit')

Confirm Existing values in edit form draft

  >>> browser.getControl('Title').value
  'Jason Mehring'

Lets change the value to something else now

  >>> browser.getControl('Title').value = 'Jason Mehring - version 2'

Confirm 'Draft' button exists

  >>> browser.getControl('Draft').click()
  >>> browser.url
  'http://nohost/plone/jason-mehring/edit'

Confirm form contains draft data

  >>> browser.getControl('Title').value
  'Jason Mehring - version 2'

#Check to make sure original content still has original data in it and that we
#did not overwrite it somehow
#
#  >>> browser.open('http://nohost/plone/jason-mehring/view')
#  >>> browser.getControl('Draft').click()
#  >>> browser.getControl('Title').value
#  'Jason Mehring'

Edit content type again and confirm data was stored in draft ok

  >>> browser.open('http://nohost/plone/jason-mehring/edit')
  >>> browser.getControl('Title').value
  'Jason Mehring - version 2'

Submit the draft

  >>> browser.getControl('Save').click()
  >>> browser.url
  'http://nohost/plone/jason-mehring'

#Confirm draft was removed
#-------------------------
#If 'Title' has no values, the draft was successfuly removed
#by previous 'Submit'.  A fresh draft will now be created.
#
#  >>> browser.open('http://nohost/plone')
#  >>> browser.getControl('Title').value
#  ''

Add back in some data so we can test to make sure cancel will remove the draft
as well

  >>> browser.open('http://nohost/plone/jason-mehring/edit')
  >>> browser.getControl('Title').value = 'Jason Mehring - version 3'
  >>> browser.getControl('Draft').click()
  >>> browser.getControl('Title').value
  'Jason Mehring - version 3'
  >>> browser.getControl('Cancel').click()
  >>> browser.url
  'http://nohost/plone/jason-mehring'

Check and make sure 'Cancel' removed the draft

  >>> browser.open('http://nohost/plone/jason-mehring/edit')
  >>> browser.getControl('Title').value
  'Jason Mehring - version 2'
  >>> browser.getControl('Cancel').click()
  >>> browser.url
  'http://nohost/plone/jason-mehring'


TODO:
- make sure we test images that they display and delete and replace
- turn on ajax validation ??  Not sure if possible; but that would help test any
  problems ajax validation may provide
- need to somehow check that the view is rendered properly with data that came
  from draft.. one way is to @@edit page to confirm data is as expected... gotta
  make sure that drafts are being removed properly so its not a cached draft if
  checking that way

# Start WingDBG GUI Debugger on port 50080
#   >>> from Testing.ZopeTestCase.utils import startZServer
#   >>> zserver = startZServer()
#   >>> host, port = zserver
#   >>> browser.open('http://%s:%s/manage_main' % (host, port))
#   >>> browser.open('http://%s:%s/Control_Panel/manage_main' % (host, port))
#   >>> browser.open('http://%s:%s/Control_Panel/WingDebugService/manage_main' % (host, port))
#   >>> browser.getControl('Start').click()
#   >>> import pdb; pdb.set_      trace()
